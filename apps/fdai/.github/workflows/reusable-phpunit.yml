name: Reusable PHPUnit Workflow

on:
    workflow_call:
        inputs:
            config-path:
                required: false
                type: string
            test-folder:
                required: true
                type: string
        secrets:
            DOPPLER_TOKEN:
                required: true
            DD_API_KEY:
                required: true
                
jobs:
    phpunit:
        environment: feature
        # Container operations are only supported on Linux runners
        runs-on: [ self-hosted, Linux, fast ]
        container:
            image: curedao/php-8.1-apache-buster-xdebug-opcache-composer-pgsql:latest
            # Can't get consistent highchart exports from curedao/php-8.1-apache-buster-xdebug-opcache-composer-pgsql:latest
            # in local environment even though both docker containers version seem to work
            # image: kirschbaumdevelopment/laravel-test-runner:8.1-couch-mongo
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.test-folder }}
            cancel-in-progress: true
        
        steps:
            -   name: Output ENV
                run: printenv
            -   name: Output USER
                run: echo "User is $(whoami) and directory is $(pwd)"
            -   name: Remove .env
                run: rm .env || true
            -   name: Remove .env.testing so we use Doppler
                run: rm .env.testing || true
            
            -   uses: actions/checkout@v3
                with:
                    fetch-depth: 1
                    clean: false
                    
            -   name: Copy Test DB
                run: |
                    cp tests/fixtures/qm_test.sqlite storage/qm_test.sqlite
                    
            -   name: Echo user
                run: |
                    echo "I am $(whoami)"
            
            -   name: Install Doppler
                run: |
                    (curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh || wget -t 3 -qO- https://cli.doppler.com/install.sh) | sh
            
            -   name: Install composer dependencies
                run: |
                    doppler run --command="composer install"
                timeout-minutes: 2
                env:
                    DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
                    RUNNER: ${{ runner.name }}
                    APP_DEBUG: ${{ runner.debug }}
                    RUNNER_TEMP: ${{ runner.temp }} # The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them.
                    RUNNER_OS: ${{ runner.os }} # The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS
                    RUNNER_TOOL_CACHE: ${{ runner.tool_cache }} # The path to the directory containing preinstalled tools for GitHub-hosted runners. 
            -   name: Make phantomjs executable
                run: |
                    chmod +x ./vendor/mikepsinn/php-highcharts-exporter/phantomjs
                env:
                    DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
                    RUNNER: ${{ runner.name }}
                    APP_DEBUG: ${{ runner.debug }}
                    RUNNER_TEMP: ${{ runner.temp }} # The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them.
                    RUNNER_OS: ${{ runner.os }} # The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS
                    RUNNER_TOOL_CACHE: ${{ runner.tool_cache }} # The path to the directory containing preinstalled tools for GitHub-hosted runners. 
            -   name: Run tests/bootstrap.php to output ENV
                run:  doppler run --command="php tests/bootstrap.php"
                env:
                    DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
                    RUNNER: ${{ runner.name }}
                    APP_DEBUG: ${{ runner.debug }}
                    RUNNER_TEMP: ${{ runner.temp }} # The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them.
                    RUNNER_OS: ${{ runner.os }} # The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS
                    RUNNER_TOOL_CACHE: ${{ runner.tool_cache }} # The path to the directory containing preinstalled tools for GitHub-hosted runners. 
            -   name: Run PHPUnit Tests # https://github.com/mheap/phpunit-github-actions-printer 
                run:  doppler run --command="vendor/bin/phpunit --log-junit build/junit.xml --stop-on-error --stop-on-failure --printer mheap\\\\GithubActionsReporter\\\\Printer ${{ inputs.test-folder }}"
                env:
                    DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
                    RUNNER: ${{ runner.name }}
                    APP_DEBUG: ${{ runner.debug }}
                    RUNNER_TEMP: ${{ runner.temp }} # The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them.
                    RUNNER_OS: ${{ runner.os }} # The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS
                    RUNNER_TOOL_CACHE: ${{ runner.tool_cache }} # The path to the directory containing preinstalled tools for GitHub-hosted runners. 

            -   name: npm install -g @datadog/datadog-ci
                run: |
                    npm install -g @datadog/datadog-ci || true
            
            -   name: Upload JUnit results to Datadog
                run: |
                    DATADOG_API_KEY=${{ secrets.DD_API_KEY }} DD_ENV=ci datadog-ci junit upload   --service ${{ inputs.test-folder }}   build/
                    
#            - uses: datadog/junit-upload-github-action@v1
#              with:
#                  api-key: ${{ secrets.DD_API_KEY }}
#                  service: ${{ inputs.test-folder }}
#                  files: ./build/     
                  
                    
#            # https://github.com/andrcuns/allure-publish-action          
#            - name: Archive Allure results
#              uses: actions/upload-artifact@v3
#              with:
#                  name: allure-results
#                  path: 'build/allure-results/**'
#    
#    
#            -   name: Get Allure history
#                uses: actions/checkout@v2
#                if: always()
#                continue-on-error: true
#                with:
#                    ref: gh-pages
#                    path: gh-pages
#            -   name: Allure Report action from marketplace
#                uses: simple-elf/allure-report-action@master
#                if: always()
#                #id: allure-report
#                with:
#                    allure_results: build/allure-results
#                    #gh_pages: gh-pages
#                    #allure_report: allure-report
#                    allure_history: allure-history
#                    keep_reports: 20
#            -   name: Deploy report to Github Pages
#                if: always()
#                uses: peaceiris/actions-gh-pages@v2
#                env:
#                    PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#                    PUBLISH_BRANCH: gh-pages
#                    PUBLISH_DIR: allure-history
#            -   name: Post the link to the report # https://github.com/Sibz/github-status-action
#                if: always()
#                uses: Sibz/github-status-action@v1
#                with:
#                    authToken: ${{secrets.GITHUB_TOKEN}}
#                    context: 'Test report'
#                    state: 'success'
#                    sha: ${{github.event.pull_request.head.sha || github.sha}}
#                    target_url: https://mikepsinn.github.io/curedao-api/${{ github.run_number }}
#            
#            # https://github.com/andrcuns/allure-publish-action
#            - name: Publish allure report
#              uses: andrcuns/allure-publish-action@v2.2.0
#              env:
#                  STORAGE_ACCESS_KEY_ID: ${{ secrets.ALLURE_STORAGE_ACCESS_KEY_ID }}
#                  STORAGE_SECRET_ACCESS_KEY: ${{ secrets.ALLURE_STORAGE_SECRET_ACCESS_KEY }}
#                  GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#              with:
#                  storageType: s3
#                  resultsGlob: "build/allure-results"
#                  bucket: qm-allure-test-reports
#                  prefix: $GITHUB_REF
#                  copyLatest: true
#                  ignoreMissingResults: false
