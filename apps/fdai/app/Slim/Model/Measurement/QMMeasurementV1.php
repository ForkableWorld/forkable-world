<?php
/*
*  GNU General Public License v3.0
*  Contributors: ADD YOUR NAME HERE, Mike P. Sinn
 */

namespace App\Slim\Model\Measurement;
use App\Models\Measurement;
use App\Models\MeasurementExport;
use App\Slim\Model\QMUnit;
use App\Types\QMStr;
use App\Variables\QMUserVariable;
use App\Variables\QMVariableCategory;
class QMMeasurementV1 extends QMMeasurement {
	public $clientId;
	public $createdAt;
	public $description;
	public $displayUnitAbbreviatedName;
	public $displayUnitName;
	public $duration;
	public $error;
	public $icon;
	public $id;
	public $note;
	public $noteHtml;
	public $additionalMetaData;
	public $originalUnitAbbreviatedName;
	public $originalUnitId;
	public $originalValue;
	public $pngPath;
	public $source;
	public $sourceName;
	public $startDate;
	public $startTime;
	public $unitAbbreviatedName;
	public $unitId;
	public $updatedAt;
	public $valence;
	public $value;
	public $valueUnitVariableName;
	public $variableCategoryId;
	public $variableCategoryName;
	public $variableDescription;
	public $variableId;
	public $variableName;
	/**
	 * @var null
	 */
	public $unitName;
	/**
	 * @param string $sourceName (Required) Measurement source name.
	 * @param string $uv (Required) Measurement variable name.
	 * @param int $startTimeEpoch (Required) Measurement startTime
	 * @param float $value (Required) Measurement value (automatically converted to display unit)
	 * @param string $unitAbbreviatedName (Required) Abbreviated name for the displayed measurement unit.
	 * @param $note (Optional) Note provided with measurement
	 * @param null|float $originalValue (Optional) Original value
	 * @param null|string $originalUnitAbbreviatedName (Optional) Unit
	 * @param string $createdAt Created Time
	 * @param string $updatedAt Updated Time
	 * @param int $id
	 * @param int $unitId
	 * @param string $variableCategoryName
	 * @param int $variableCategoryId
	 * @param int $variableId
	 * @param string $variableDescription
	 * @param null $unitName
	 * @param null $icon
	 */
	public function __construct($sourceName, $uv, $startTimeEpoch, $value, $unitAbbreviatedName, $note = null,
		$originalValue = null, $originalUnitAbbreviatedName = null, $createdAt = '', $updatedAt = '', $id = null,
		$unitId = null, $variableCategoryName = null, $variableCategoryId = null, $variableId = null,
		$variableDescription = null, $unitName = null, $icon = null){
		$this->sourceName = $sourceName;
		$uv = QMUserVariable::find($uv);
		$this->userId = $uv->getUserId();
		$this->variableName = $uv->getVariableName();
		$this->variableId = $uv->getVariableIdAttribute();
		$this->startTime = $this->startTimeEpoch = $startTimeEpoch;
		$this->value = $value;
		$this->unitAbbreviatedName = $unitAbbreviatedName;
		$this->note = $note;
		$this->originalValue = $originalValue;
		$this->originalUnitAbbreviatedName = $originalUnitAbbreviatedName;
		$this->createdAt = $createdAt;
		$this->updatedAt = $updatedAt;
		$this->setId($id);
		$this->unitId = $unitId;
		$this->variableCategoryName = $variableCategoryName;
		$this->variableCategoryId = $variableCategoryId;
		$this->variableDescription = $variableDescription;
		$this->unitName = $unitName;
		$this->icon = $icon;
		if(!$this->unitId){
			$this->unitId = QMUnit::getByNameOrId($this->unitAbbreviatedName)->id;
			QMUnit::addUnitNames($this);
		}
		$this->startAt = db_date($startTimeEpoch);
	}
	public function setVariableCategory($cat): QMVariableCategory{
		$cat = parent::setVariableCategory($cat);
		$this->variableCategoryName = $cat->name;
		return $cat;
	}
//	public function toArray(): array{
//		$data = [];
//		foreach($this as $key => $value){
//			if(MeasurementExport::hasColumn($snake = QMStr::snakize($key))){
//				$data[$snake] = $value;
//			}
//		}
//		return $data; // TODO: Change the autogenerated stub
//	}
	public function save(): bool {
		$m = Measurement::fromData($this);
		//return $m->save();
		return true;
	}
}
