<?php
/*
*  GNU General Public License v3.0
*  Contributors: ADD YOUR NAME HERE, Mike P. Sinn
 */

namespace App\Slim\Model;
use App\Files\FileHelper;
use App\Logging\QMLog;
use App\Models\BaseModel;
use App\Models\UnitCategory;
use App\Traits\HardCodable;
use App\Traits\HasOptions;
use App\Types\ObjectHelper;
use App\Types\QMStr;
use App\UI\FontAwesome;
use App\UI\ImageUrls;
use Illuminate\Support\Collection;
/**
 * @mixin UnitCategory
 */
class QMUnitCategory extends DBModel {
	use HardCodable, HasOptions;
	/** @var array */
	private static $indexedByName;
	public $name;
	public $standardUnitAbbreviatedName;
	public $id;
	public $canBeSummed;
	public $combinationOperation;
	public ?float $fillingValue;
	public $image = ImageUrls::FITNESS_MEASURING_TAPE;
	public $fontAwesome = FontAwesome::RULER_SOLID;
	public const TABLE = UnitCategory::TABLE;
	/**
	 * UnitCategory constructor.
	 */
	public function __construct(){ }
	/**
	 * @return QMUnitCategory[]
	 */
	public static function getIndexedByName(): array{
		if(isset(self::$indexedByName)){
			return self::$indexedByName;
		}
		$path = self::getHardCodedDirectory();
		$models = ObjectHelper::instantiateAllModelsInFolder('UnitCategory', $path);
		$indexed = [];
		foreach($models as $model){
			$indexed[$model->name] = $model;
		}
		return self::$indexedByName = $indexed;
	}
	/**
	 * @return array
	 */
	public static function getAsArray(): array{
		return array_values(self::getIndexedByName());
	}
	/**
	 * @param int|string $name
	 * @return QMUnitCategory
	 */
	public static function find($name): ?DBModel{
		$unitCategoryArraysIndexedById = self::getIndexedByName();
		if(is_int($name)){
			return collect($unitCategoryArraysIndexedById)->where('id', '=', $name)->first();
		}
		return $unitCategoryArraysIndexedById[$name];
	}
	/**
	 * @return string
	 */
	public static function getHardCodedDirectory(): string{
		return FileHelper::absPath("app/UnitCategories");
	}
	/**
	 * @return string
	 */
	public function getNameAttribute(): string{
		return $this->name;
	}
	/**
	 * @param string $name
	 * @return QMUnitCategory
	 */
	public static function getByName(string $name): ?QMUnitCategory{
		$indexedByName = self::getIndexedByName();
		if(!isset($indexedByName[$name])){
			return null;
		}
		return $indexedByName[$name];
	}
	public function getImage(): string{
		return $this->image;
	}
	public function getFontAwesome(): string{
		return $this->fontAwesome;
	}
	public static function updateDatabaseTableFromHardCodedConstants(): array{
		QMLog::logStartOfProcess(static::TABLE . ' ' . __FUNCTION__);
		$all = UnitCategory::all();
		$allChanges = [];
		foreach($all as $l){
			$id = $l->id;
			$hard = self::find($id);
			foreach($hard as $key => $value){
				$snake = QMStr::snakize($key);
				if(!$l->hasColumn($snake)){
					continue;
				}
				if($l->attributeIsAutoGenerated($snake)){
					continue;
				}
				$l->setAttributeIfDifferentFromAccessor($snake, $value);
			}
			$changes = $l->getChangeList();
			if(!$changes){
				continue;
			}
			$allChanges[$l->getTitleAttribute()] = $changes;
			$l->save();
		}
		if(!$allChanges){
			QMLog::info("No unit category changes...");
		} else{
			QMLog::info("Unit category changes: " . \App\Logging\QMLog::print_r($allChanges, true));
		}
		QMLog::logEndOfProcess(static::TABLE . ' ' . __FUNCTION__);
		return $allChanges;
	}
	protected function generateFileContentOfHardCodedModel(): string{
		// TODO: Implement generateFileContentOfHardCodedModel() method.
	}
    /**
     * @return string|BaseModel
     */
    public static function getLaravelClassName(): string{
        return UnitCategory::class;
    }
	public function getTitleAttribute():string{
		return $this->getNameAttribute();
	}
	public static function all(): Collection{
		return collect(self::getIndexedByName());
	}
	public function getDescription(): string{
		return $this->getCategoryDescription();
	}
	public function getSubtitleAttribute(): string{
		return $this->getCategoryDescription();
	}
}
