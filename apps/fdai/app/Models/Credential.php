<?php
/*
*  GNU General Public License v3.0
*  Contributors: ADD YOUR NAME HERE, Mike P. Sinn
 */

namespace App\Models;
use App\Models\Base\BaseCredential;
use App\Traits\HasModel\HasDataSource;
use App\Traits\HasModel\HasUser;
use App\UI\FontAwesome;
use Awobaz\Compoships\Compoships;
use Carbon\Carbon;
use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
/** App\Models\Credential
 * @OA\Schema (
 *      definition="Credential",
 *      required={"connector_id", "attrKey", "attrValue"},
 *      @OA\Property(
 *          property="user_id",
 *          description="ID of user that owns this credential",
 *          type="integer"
 *      ),
 *      @OA\Property(
 *          property="connector_id",
 *          description="The id for the connector data source from which the credential was obtained",
 *          type="integer"
 *      ),
 *      @OA\Property(
 *          property="attr_key",
 *          description="Attribute name such as token, userid, username, or password",
 *          type="string"
 *      ),
 *      @OA\Property(
 *          property="attr_value",
 *          description="Encrypted value for the attribute specified",
 *          type="string"
 *      ),
 *      @OA\Property(
 *          property="created_at",
 *          description="When the record was first created. Use ISO 8601 datetime format",
 *          type="string",
 *          format="date-time"
 *      ),
 *      @OA\Property(
 *          property="updated_at",
 *          description="When the record in the database was last updated. Use ISO 8601 datetime format",
 *          type="string",
 *          format="date-time"
 *      )
 * )
 * @property integer $user_id ID of user that owns this credential
 * @property boolean $connector_id The id for the connector data source from which the credential was obtained
 * @property string $attr_key Attribute name such as token, userid, username, or password
 * @property mixed $attr_value Encrypted value for the attribute specified
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @method static \Illuminate\Database\Query\Builder|Credential whereUserId($value)
 * @method static \Illuminate\Database\Query\Builder|Credential whereConnectorId($value)
 * @method static \Illuminate\Database\Query\Builder|Credential whereAttrKey($value)
 * @method static \Illuminate\Database\Query\Builder|Credential whereAttrValue($value)
 * @method static \Illuminate\Database\Query\Builder|Credential whereCreatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|Credential whereUpdatedAt($value)
 * @property-read Connector $connector
 * @property string|null $status
 * @property string|null $message
 * @property string|null $expires_at
 * @property string|null $deleted_at
 * @property string|null $client_id
 * @method static Builder|Credential newModelQuery()
 * @method static Builder|Credential newQuery()
 * @method static Builder|Credential query()
 * @method static Builder|Credential whereClientId($value)
 * @method static Builder|Credential whereDeletedAt($value)
 * @method static Builder|Credential whereExpiresAt($value)
 * @method static Builder|Credential whereMessage($value)
 * @method static Builder|Credential whereStatus($value)
 * @mixin Eloquent
 * @property-read OAClient|null $oa_client
 * @property-read User $user
 * @method static Builder|BaseModel nPerGroup($group, $n = 10)
 * @method static Builder|BaseModel applyRequestParams($request)
 * @method static Builder|BaseModel exclude($columns)
 * @method static Builder|BaseModel excludeLargeColumns()
 */
class Credential extends BaseCredential {
	use HasDataSource, Compoships;
	use HasUser;
	public const CLASS_CATEGORY = Connector::CLASS_CATEGORY;
	public const FONT_AWESOME = FontAwesome::USER_SECRET_SOLID;
	public static function getUniqueIndexColumns(): array{return [self::FIELD_USER_ID, self::FIELD_CONNECTOR_ID];}
	public function getAutoGeneratedColumns(): array{
		return [self::CREATED_AT, self::UPDATED_AT];
	}
	public $table = "credentials";
	/**
	 * The attributes that should be casted to native types.
	 * @var array
	 */
	protected $casts = [
		"connector_id" => "integer",
		"attr_key" => "string",
		"attr_value" => "string",
	];
	/**
	 * @return BelongsTo
	 */
	public function connector(): BelongsTo{
		return $this->belongsTo(Connector::class);
	}
	public function getUserId(): ?int{
		return $this->attributes[self::FIELD_USER_ID];
	}
	/**
	 * @return BelongsTo
	 */
	public function connection(): BelongsTo{
		return $this->belongsTo(Connection::class, [Credential::FIELD_USER_ID, Credential::FIELD_CONNECTOR_ID],
			[self::FIELD_USER_ID, self::FIELD_CONNECTOR_ID]);
	}
}
