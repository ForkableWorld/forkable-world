<?php
/*
*  GNU General Public License v3.0
*  Contributors: ADD YOUR NAME HERE, Mike P. Sinn
 */

namespace App\Solutions;
use App\Buttons\Admin\PHPStormButton;
use App\Logging\LinksLogMetaData;
use App\Logging\SolutionButton;
use App\Types\QMStr;
use App\Utils\AppMode;
use Facade\IgnitionContracts\BaseSolution;
use App\Files\PHP\BasePhpUnitTestFile;
class OpenTestInPHPStormDebugSolution extends BaseSolution {
	/**
	 * @var \Throwable
	 */
	private $exception;
	public function __construct(\Throwable $e){
		$this->exception = $e;
		parent::__construct(QMStr::classToTitle(QMStr::toShortClassName(static::class)));
	}
	public function getSolutionTitle(): string{
		return "Debug the Test";
	}
	public function getSolutionDescription(): string{
		return \App\Utils\AppMode::getCurrentTestName() . " run test in the browser or PHPStorm and debug";
	}
	public function getDocumentationLinks(): array{
		$e = $this->getException();
		$test = \App\Utils\AppMode::getCurrentTestName();
		if(AppMode::isJob()){
			if($last = BasePhpUnitTestFile::getLastTest()){
				$url = $last['url'];
				$test = $last['name'];
			}
		}
		if(!isset($url)){
			$url = SolutionButton::getPHPStormUrlForTest($e);
		}
		$arr = SolutionButton::addUrlNameArrays([
			                                        "Add Break Point Here" => PHPStormButton::redirectUrl($e->getFile(),
			                                                                                              $e->getLine()),
			                                        "Run $test" => $url,
		                                        ], $e);
		$arr = array_merge(LinksLogMetaData::get(), $arr);
		return $arr;
	}
	/**
	 * @return \Throwable
	 */
	public function getException(): \Throwable{
		return $this->exception;
	}
}
