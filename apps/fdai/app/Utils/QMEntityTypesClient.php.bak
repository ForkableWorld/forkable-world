<?php
namespace App\Utils;
use App\Files\FileHelper;
use Google\ApiCore\ApiException;
use Google\ApiCore\PagedListResponse;
use Google\Cloud\Dialogflow\V2\EntityType_Entity;
use Google\Cloud\Dialogflow\V2\EntityTypesClient;

/** Class VariableCategory
 * @package App\Slim\Model
 */
class QMEntityTypesClient extends EntityTypesClient {
    public const DR_MODO_PROJECT_ID = '6c71b4a4-4770-45a9-b8b3-dd34bbbb61c7';
    //const DR_MODO_PROJECT_ID = 'dr-modo';
    public const DR_MODO_CREDENTIALS_PATH = 'configs/google/Dr-Modo-1e7e6dcb3290.json';
    public $projectId;
    public $entityTypeId;
    public $existingEntities;
    /**
     * EntityTypesClient constructor.
     */
    public function __construct(){
        self::setCredentialsPath();
        parent::__construct();
        $this->setProjectId(self::DR_MODO_PROJECT_ID);
    }
    private static function setCredentialsPath(){
        $credentialsPath = FileHelper::prependProjectRootIfNecessary(self::DR_MODO_CREDENTIALS_PATH);
        putenv("GOOGLE_APPLICATION_CREDENTIALS=$credentialsPath");
    }
    /**
     * @param string $name
     * @return null
     */
    private function getEntityTypeId(string $name){
        $existingEntities = $this->getExistingEntities();
        foreach($existingEntities as $entity){
            if($entity->name === $name){
                return $entity->id;
            }
        }
        return null;
    }
    /**
     * @return PagedListResponse
     * @throws ApiException
     */
    public function getExistingEntities(){
        if($this->existingEntities === null){
            $this->setExistingEntities();
        }
        return $this->existingEntities;
    }
    /**
     * @return PagedListResponse
     * @throws ApiException
     */
    public function setExistingEntities(){
        return $this->existingEntities = parent::listEntityTypes($this->getProjectParent());
    }
    /**
     * @param string $entityName
     * @param array $entries
     * @throws ApiException
     */
    public function updateEntities(string $entityName, array $entries){
        $entities = [];
        foreach($entries as $entry){
            $entity = new EntityType_Entity();
            $entity->setValue($entry['value']);
            $entity->setSynonyms($entry['synonyms']);
            $entities[] = $entity;
        }
        parent::batchUpdateEntities($this->getEntityTypeParent($entityName), $entities);
    }
    /**
     * @return string
     */
    private function getProjectParent(): string{
        return "projects/".$this->getProjectId()."/agent";
    }
    /**
     * @param string $entityTypeName
     * @return string
     */
    private function getEntityTypeParent(string $entityTypeName): string{
        $id = $this->getEntityTypeId($entityTypeName);
        return $this->getProjectParent()."/entityTypes/".$id;
    }
    /**
     * @return string
     */
    public function getProjectId(): string{
        return $this->projectId;
    }
    /**
     * @param string $projectId
     */
    public function setProjectId($projectId){
        $this->projectId = $projectId;
    }
    /**
     * @param string $entityTypeId
     */
    public function setEntityTypeId($entityTypeId){
        $this->entityTypeId = $entityTypeId;
    }
}
