<?php /** @var BashScriptFile $file */
use App\Files\Bash\BashScriptFile; ?>#!/usr/bin/env bash@verbatim
# shellcheck disable=SC2034
# bashsupport disable=BP5001
############################################################################################################
# THIS SCRIPT WAS AUTO-GENERATED by
# 1. Edit the template at `resources/views/bash/bash_script.blade.php`
# 2. Regenerate all scripts by running `scripts/lib/generate_scripts_from_template.php`
#############################################################################################################
# CUSTOMIZING THIS SCRIPT
# 1. Add additional functions to implement the desired functionality to the library scripts in `scripts/lib/`
# 2. Update the main() function to call your additional functions
# 3. Optional: Update the script_usage() function with additional usage guidance
# 4. Optional: Update the parse_params() function with additional script parameters
###############################################################################################################
@include('bash.bash_variable_assignment')
####################################################################################################################
@include('bash.bash_libraries')
####################################################################################################################
@verbatim
####################################################################################################################
# BASH SETTINGS
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then # Enable xtrace if the DEBUG environment variable is set
  set -o xtrace                          # Trace the execution of the script (debug)
fi
if ! (return 0 2>/dev/null); then # Only enable these shell behaviours if were not being sourced # Approach via: https://stackoverflow.com/a/28776166/8787985
  set -o errexit                  # Exit on most errors (see the manual)
  set -o nounset                  # Disallow expansion of unset variables
  set -o pipefail                 # Use last non-zero exit code in a pipeline
fi
set -o errtrace # Ensure the error trap handler is inherited # Enable errtrace or the error trap handler will not work as expected
# END BASH SETTINGS
####################################################################################################################

####################################################################################################################
# SCRIPT USAGE HELP
function script_usage() {
  cat <<EOF
Usage:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colour             Disables colour output
    -cr|--cron                  Run silently unless we encounter an error
EOF
}
# END SCRIPT USAGE HELP
####################################################################################################################
# SCRIPT PARAMETER DEFINITION
# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
# shellcheck disable=SC2034,SC2034
function parse_params() {
  local param
  while [[ $# -gt 0 ]]; do
    param="$1"
    shift
    case $param in
      -h | --help)
        script_usage
        exit 0
        ;;
      -v | --verbose)
        verbose=true
        ;;
      -nc | --no-colour)
        no_colour=true
        ;;
      -cr | --cron)
        cron=true
        ;;
      *)
        script_exit "Invalid parameter was provided: $param" 1
        ;;
    esac
  done
}
# END PARAMETER DEFINITION
####################################################################################################################

####################################################################################################################
# START MAIN FUNCTION
# ARGS: $@ (optional): Arguments provided to the script
function main() {
	trap script_trap_err ERR
	trap script_trap_exit EXIT
	script_init "$@"
	parse_params "$@"
	cron_init
	colour_init
	#lock_init system
@endverbatim

####################################################################################################################
# YOUR MAIN CODE STARTS HERE
{!!$file->getMain()!!}
# YOUR MAIN CODE ENDS HERE
####################################################################################################################
}
# END MAIN FUNCTION
####################################################################################################################

####################################################################################################################
# CALL MAIN FUNCTION (Invoke main with args if not sourced)
if ! (return 0 2>/dev/null); then 
main "$@"
fi
# END MAIN FUNCTION CALL
####################################################################################################################
# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
