<?php namespace Tests\APIs;
use App\Models\OARefreshToken;
use App\Models\WpUsermetum;
use App\Properties\Base\BaseClientIdProperty;
use App\Properties\Base\BaseClientSecretProperty;
use App\Types\QMStr;
use Database\Seeders\WpUsersTableSeeder;
use Tests\QMBaseTestCase;
use Tests\UnitTestCase;
use Tests\ApiTestTrait;
use App\Models\User;

class UserApiTest extends UnitTestCase
{
    use ApiTestTrait;

	public function test_create_get_and_delete_user(){
		$this->seedUserTableIfNecessary();
		$userFromUpdate = $this->createWithProviderId();
		$userId = $userFromUpdate->id;
		$this->getUserFromApi($userId);
		$this->setAuthenticatedUser($userId);
		$this->updateUser($userId);
		$time = time();
		$res = $this->postAsApp('api/v6/user_meta', [
			'user_id' => $userId,
			'time' => $time
		]);
		$r = $this->getAsApp('api/v6/user_meta?user_id='.$userId);
		$r->assertStatus(200);
		$arr = $r->json();
		$this->assertArrayHasKey('time', $arr);
		foreach($arr as $key => $item){
			if($key === 'time'){
				$this->assertEquals($time, $item[WpUsermetum::FIELD_META_VALUE]);
				$this->assertEquals(BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT, $item[WpUsermetum::FIELD_CLIENT_ID]);
			}
		}
		$this->assertUserExists($userId);
		$this->deleteUser($userId);
	}
	/**
	 * @param mixed $userId
	 * @return void
	 */
	public function deleteUser(mixed $userId): void{
		$r = $this->testResponse = $this->jsonAsApp('DELETE', '/api/v6/users/' . $userId);
		$r->assertStatus(204);
		$this->expectModelNotFoundException();
		$this->assertApiSuccess();
		$r = $this->testResponse = $this->jsonAsApp('GET', '/api/v6/users/' . $userId);
		$r->assertStatus(404);
	}
	/**
	 * @param mixed $userId
	 * @return \Illuminate\Testing\TestResponse
	 */
	public function updateUser(mixed $userId): \Illuminate\Testing\TestResponse{
		$expected = QMStr::random(10);
		$this->assertNotNull($userId);
		$r = $this->jsonAsApp('PUT', '/api/v6/users/' . $userId, [
			User::FIELD_USER_NICENAME => $expected
		]);
		$r->assertStatus(201);
		$userFromDB = User::find($userId);
		$this->assertEquals($expected, $userFromDB->user_nicename);
		$t = new OARefreshToken();
		$this->assertArrayEquals([
			0 => 'created_at',
			1 => 'refresh_token',
			2 => 'updated_at',
		], $t->getAutoGeneratedColumns());
		return $r;
	}
	/**
	 * @return void
	 */
	public function seedUserTableIfNecessary(): void{
		if(!User::count()){
			(new WpUsersTableSeeder())->run();
		}
	}
	/**
	 * @return object|User
	 */
	public function testCreateWithEmail(): object {
		$rand = mt_rand(0, 100000);
		$email = "testuser$rand@gmail.com";
		$user1 = User::whereEmail($email)->withTrashed()->first();
		if($user1){
			$user1->hardDeleteWithRelations(__METHOD__);
		}
		$password = 'qwerty123';
		$user = [
			'email' => $email,
			'client_id' => BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT,
			'client_secret' => BaseClientSecretProperty::TEST_CLIENT_SECRET,
			'password' => $password,
			'register' => true,
		];
		$r = $this->jsonAsApp('POST', '/api/v6/users', $user);
		$r->assertStatus(201);
		$r = $this->getTestResponse();
		$body = $r->json();
		/** @var User $userFromUpdate */
		$userFromUpdate = (object)$body['data'][0];
		$this->assertEquals($email, $userFromUpdate->email);
		$this->assertStringContains($userFromUpdate->user_login, $rand, User::FIELD_USER_LOGIN);
		$this->assertEquals(BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT, $userFromUpdate->client_id);
		$user = $this->get('/api/v6/me?email=' . $email."&password=$password");
		$this->assertEquals(200, $user->getStatusCode());
		$data = $user->json();
		$data = $data["data"];
		$this->assertArrayHasKey('id', $data);
		$this->assertEquals($email, $data['email']);
		return $userFromUpdate;
	}
	/**
	 * @return object|User
	 */
	private function createWithProviderId(): object {
		$providerId = '20361fef-e7df-45af-9890-9bc70c8bd7e5';
		$user1 = User::whereProviderId($providerId)->withTrashed()->first();
		if($user1){
			$user1->hardDeleteWithRelations(__METHOD__);
		}
		$user = [
			'provider_id' => $providerId,
			'client_id' => BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT,
			'client_secret' => BaseClientSecretProperty::TEST_CLIENT_SECRET,
		];
		$r = $this->jsonAsApp('POST', '/api/v6/users', $user);
		$r->assertStatus(201);
		$r = $this->getTestResponse();
		$body = $r->json();
		/** @var User $userFromUpdate */
		$userFromUpdate = (object)$body['data'][0];
		$this->assertEquals($providerId, $userFromUpdate->provider_id);
		$this->assertStringContains($userFromUpdate->user_login, $providerId, User::FIELD_USER_LOGIN);
		$this->assertEquals(BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT, $userFromUpdate->client_id);
		return $userFromUpdate;
	}
	/**
	 * @param object|\App\Models\User $userFromUpdate
	 * @return array
	 */
	private function getUserFromApi(int $userId): object {
		$r = $this->jsonAsApp('GET', '/api/v6/users/' . $userId);
		$r->assertStatus(200);
		/** @var User $user */
		$user = (object)$this->getJsonResponseData();
		$this->assertContains([
			'address' => null,
			'analysis_ended_at' => null,
			'analysis_requested_at' => null,
			'analysis_started_at' => null,
			'avatar' => 'https://static.quantimo.do/img/robots/quantimodo-robot-puzzled-213-300.png',
			'birthday' => null,
			'client_id' => 'oauth_test_client',
			'client_user_id' => '20361fef-e7df-45af-9890-9bc70c8bd7e5',
			'combine_notifications' => false,
			'country' => null,
			'cover_photo' => null,
			'currency' => null,
			'display_name' => '20361fef-e7df-45af-9890-9bc70c8bd7e5@oauth_test_client.com',
			'earliest_reminder_time' => '07:00:00',
			'email' => '20361fef-e7df-45af-9890-9bc70c8bd7e5@oauth_test_client.com',
			'first_name' => null,
			'gender' => null,
			'gravatar' => null,
			'has_android_app' => false,
			'has_chrome_extension' => false,
			'has_ios_app' => false,
			'id' => 18536,
			'is_public' => null,
			'language' => null,
			'last_email_at' => null,
			'last_name' => null,
			'last_push_at' => null,
			'latest_reminder_time' => '21:00:00',
			'measurements_count' => null,
			'newest_data_at' => null,
			'notifications_count' => null,
			'number_of_patients' => null,
			'password' => '$2y$10$VYPrKjutlyJQGge5/WDvmeAB.DRadrw88lxKzeoTX2E/mY3x6LVNe',
			'phone_number' => null,
			'primary_outcome_variable_id' => null,
			'provider_id' => '20361fef-e7df-45af-9890-9bc70c8bd7e5',
			'push_notifications_enabled' => true,
			'reg_provider' => 'oauth_test_client',
			'roles' => [],
			'send_predictor_emails' => true,
			'send_reminder_notification_emails' => false,
			'sent_emails_count' => null,
			'share_all_data' => false,
			'slug' => '20361fef-e7df-45af-9890-9bc70c8bd7e5-oauth-test',
			'state' => null,
			'tag_line' => null,
			'time_zone_offset' => null,
			'timezone' => null,
			'track_location' => false,
			'tracking_reminder_notifications_count' => null,
			'tracking_reminders_count' => null,
			'unsubscribed' => true,
			'updated_at' => '2022-10-03T07:25:57.000000Z',
			'user_error_message' => null,
			'user_login' => '20361fef-e7df-45af-9890-9bc70c8bd7e5-oauth_test_',
			'user_url' => '',
			'verified' => null,
			'zip_code' => null,
			'access_token' => [
				'access_token' => 'kwziFLcL82CP74E4iDngEUT0TMHBJwdQLcljwIUQ',
				'client_id' => 'oauth_test_client',
				'deleted_at' => null,
				'scope' => null,
				'user_id' => 18536,
			],
			'refresh_token' => [
				'client_id' => 'oauth_test_client',
				'deleted_at' => null,
				'refresh_token' => '6yidMHlOQGXHDZ8MwLtEFw2uMrUlNXbyX4v7kbeW',
				'scope' => null,
				'user_id' => 18536,
			],
		], (array)$user);
		return $user;
	}
	/**
	 * @param mixed $userId
	 * @return void
	 */
	private function assertUserExists(int $userId): void{
		$user = User::find($userId);
		$this->assertNotEmpty($user, "User $userId not found");
		$this->assertEquals(BaseClientIdProperty::CLIENT_ID_OAUTH_TEST_CLIENT, $user->client_id);
	}
}
